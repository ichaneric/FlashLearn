import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

const verifyToken = (token: string) => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (error) {
    return null;
  }
};

export async function PUT(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  if (!decoded) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });

  try {
    // Accept any subset of fields for partial update
    const { full_name, educational_level, email, profile, password } = await req.json();
    const updateData: any = {};
    if (full_name) updateData.full_name = full_name;
    if (educational_level) updateData.educational_level = educational_level;
    if (email) updateData.email = email;
    if (profile) updateData.profile = profile;
    // If password is provided, hash it before saving
    if (password) {
      const salt = await bcrypt.genSalt(10);
      updateData.password = await bcrypt.hash(password, salt);
    }
    if (Object.keys(updateData).length === 0) {
      return NextResponse.json({ error: 'No fields to update' }, { status: 400 });
    }
    const user = await prisma.user.update({
      where: { user_id: decoded.user_id },
      data: updateData,
    });
    return NextResponse.json({ message: 'Profile updated', user: {
      full_name: user.full_name,
      educational_level: user.educational_level,
      email: user.email,
      profile: user.profile
    }});
  } catch (error: any) {
    console.error(error);
    // Return the error message and code for debugging
    return NextResponse.json({ error: error.message || 'Update failed', code: error.code || null }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}
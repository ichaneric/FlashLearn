import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

const verifyToken = (token: string) => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (error) {
    return null;
  }
};

export async function POST(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  if (!decoded) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });

  try {
    const { friend_id } = await req.json();
    if (!friend_id) {
      return NextResponse.json({ error: 'Missing friend_id' }, { status: 400 });
    }

    const friend = await prisma.user.findUnique({ where: { user_id: friend_id } });
    if (!friend) {
      return NextResponse.json({ error: 'Friend not found' }, { status: 404 });
    }

    await prisma.user.update({
      where: { user_id: decoded.user_id },
      data: {
        friends: { connect: { user_id: friend_id } },
      },
    });

    return NextResponse.json({ message: 'Friend added' });
  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: 'Failed to add friend' }, { status: 400 });
  } finally {
    await prisma.$disconnect();
  }
}
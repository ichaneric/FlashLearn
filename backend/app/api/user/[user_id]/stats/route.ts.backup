// File: [user_id]/stats/route.ts
// Description: API endpoint to fetch user statistics for today's activity

import { NextRequest, NextResponse } from 'next/server';
import prisma from '../../../../../prisma/singleton';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// Helper function to add CORS headers
function addCorsHeaders(response: NextResponse) {
  response.headers.set('Access-Control-Allow-Origin', '*');
  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  return response;
}

// Enhanced token verification
const verifyToken = (token: string) => {
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    return decoded;
  } catch (error) {
    console.error('[GET_USER_STATS] Token verification failed:', error);
    return null;
  }
};

// Handle OPTIONS request for CORS preflight
export async function OPTIONS() {
  const response = new NextResponse(null, { status: 200 });
  return addCorsHeaders(response);
}

/**
 * Fetches user statistics for today's activity (GET /api/user/[user_id]/stats)
 */
export async function GET(req: NextRequest, { params }: { params: { user_id: string } }) {
  const { user_id } = params;
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  
  if (!decoded) {
    console.error('[GET /api/user/[user_id]/stats] Error: Unauthorized');
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  // Verify user can only access their own stats
  if ((decoded as any).user_id !== user_id) {
    console.error('[GET /api/user/[user_id]/stats] Error: Access denied');
    return NextResponse.json({ error: 'Access denied' }, { status: 403 });
  }

  try {
    console.log('[GET /api/user/[user_id]/stats] Fetching stats for user_id:', user_id);

    // Get today's date boundaries
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999);

    // Count sets created today using proper date range comparison
    const setsCreatedToday = await prisma.set.count({
      where: {
        user_id: user_id,
        date_created: {
          gte: startOfDay,
          lte: endOfDay
        }
      }
    });

    // For now, return 0 for quizzes since they're stored in AsyncStorage
    // This can be updated when quiz records are moved to the database
    const stats = {
      quizzesTakenToday: 0, // TODO: Implement when quiz records are in database
      setsCreatedToday: setsCreatedToday
    };

    console.log('[GET /api/user/[user_id]/stats] Stats retrieved:', stats);
    return NextResponse.json(stats);

  } catch (error) {
    console.error('[GET /api/user/[user_id]/stats] Error:', error);
    return NextResponse.json({ error: 'Failed to fetch user stats' }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}

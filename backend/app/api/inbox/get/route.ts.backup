import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

const verifyToken = (token: string) => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (error) {
    return null;
  }
};

export async function GET(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  if (!decoded) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });

  try {
    const inbox = await prisma.inbox.findMany({
      where: { receiver_id: decoded.user_id },
      include: {
        set: { include: { cards: true, user: { select: { full_name: true } } } },
        sender: { select: { full_name: true } },
      },
    });
    return NextResponse.json(inbox);
  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: 'Failed to fetch inbox' }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}
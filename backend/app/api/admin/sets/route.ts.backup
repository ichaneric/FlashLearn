import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

const verifyToken = (token: string) => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (error) {
    return null;
  }
};

export async function GET(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  if (!decoded || !decoded.isAdmin) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });

  try {
    const sets = await prisma.set.findMany({
      include: { cards: true, user: { select: { full_name: true } } },
    });
    return NextResponse.json(sets);
  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: 'Failed to fetch sets' }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}

export async function DELETE(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  if (!decoded || !decoded.isAdmin) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });

  try {
    const { set_id } = await req.json();
    if (!set_id) {
      return NextResponse.json({ error: 'Missing set_id' }, { status: 400 });
    }

    await prisma.card.deleteMany({ where: { set_id } });
    await prisma.inbox.deleteMany({ where: { set_id } });
    await prisma.set.delete({ where: { set_id } });

    return NextResponse.json({ message: 'Set deleted' });
  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: 'Deletion failed' }, { status: 400 });
  } finally {
    await prisma.$disconnect();
  }
}
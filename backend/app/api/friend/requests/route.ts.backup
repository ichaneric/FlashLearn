import { NextRequest, NextResponse } from 'next/server';
import prisma from '../../../../prisma/singleton';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

const verifyToken = (token: string) => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (error) {
    return null;
  }
};

export async function GET(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  if (!decoded) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  try {
    const currentUserId = (decoded as any).user_id;
    // Find all friend requests where the current user is the receiver and status is 'pending'
    const requests = await prisma.friendRequest.findMany({
      where: { receiver_id: currentUserId, status: 'pending' },
      include: { sender: true },
    });
    const result = requests.map(req => ({
      request_id: req.id,
      full_name: req.sender.full_name,
      username: req.sender.username,
      profile_image: req.sender.profile ? `/assets/images/${req.sender.profile}` : '',
    }));
    return NextResponse.json(result);
  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: 'Failed to fetch friend requests' }, { status: 500 });
  }
} 
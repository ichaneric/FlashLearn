import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

const verifyToken = (token: string) => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (error) {
    return null;
  }
};

export async function POST(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  if (!decoded) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });

  try {
    const { card_id } = await req.json();
    if (!card_id) {
      return NextResponse.json({ error: 'Missing card_id' }, { status: 400 });
    }

    const card = await prisma.card.findUnique({ where: { card_id }, include: { set: true } });
    if (!card || (card.set.user_id !== decoded.user_id && !card.set.posted)) {
      return NextResponse.json({ error: 'Card not found or unauthorized' }, { status: 403 });
    }

    return NextResponse.json({
      card_id: card.card_id,
      card_question: card.card_question,
      card_answer: card.card_answer,
      color: card.color,
    });
  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: 'Failed to fetch card' }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}
// File: route.ts
// Description: API endpoint to handle saving and unsaving sets, tracking learner counts

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

const verifyToken = (token: string) => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (error) {
    return null;
  }
};

// Create a single Prisma client instance
let prisma: PrismaClient;

if (process.env.NODE_ENV === 'production') {
  prisma = new PrismaClient();
} else {
  // In development, use a global variable to prevent multiple instances
  if (!(global as any).prisma) {
    (global as any).prisma = new PrismaClient();
  }
  prisma = (global as any).prisma;
}

export async function POST(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  if (!decoded) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });

  try {
    const { set_id, action } = await req.json();
    
    if (!set_id || !action || !['save', 'unsave'].includes(action)) {
      return NextResponse.json({ error: 'Missing set_id or invalid action' }, { status: 400 });
    }

    // Validate set_id format (basic UUID validation)
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(set_id)) {
      return NextResponse.json({ error: 'Invalid set_id format' }, { status: 400 });
    }

    // Check if set exists
    const set = await prisma.set.findUnique({ where: { set_id } });
    if (!set) {
      return NextResponse.json({ error: 'Set not found' }, { status: 404 });
    }

    if (action === 'save') {
      // Check if already saved
      const existingSave = await prisma.setSave.findFirst({
        where: {
          user_id: decoded.user_id,
          set_id: set_id
        }
      });
      
      if (!existingSave) {
        // Save the set (create SetSave record)
        await prisma.setSave.create({
          data: {
            user_id: decoded.user_id,
            set_id: set_id
          }
        });
      }
    } else {
      // Unsave the set (delete SetSave record)
      await prisma.setSave.deleteMany({
        where: {
          user_id: decoded.user_id,
          set_id: set_id
        }
      });
    }

    // Get updated learner count
    const learnerCount = await prisma.setSave.count({
      where: { set_id: set_id }
    });

    return NextResponse.json({ 
      success: true, 
      learnerCount,
      action 
    });

  } catch (error) {
    console.error('[set/save] Error:', error);
    console.error('[set/save] Error details:', {
      message: error.message,
      stack: error.stack,
      set_id: set_id,
      action: action,
      user_id: decoded?.user_id
    });
    return NextResponse.json({ error: 'Failed to process save/unsave action' }, { status: 500 });
  }
}

export async function GET(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1];
  const decoded = token ? verifyToken(token) : null;
  if (!decoded) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });

  try {
    const { searchParams } = new URL(req.url);
    const set_id = searchParams.get('set_id');

    if (!set_id) {
      return NextResponse.json({ error: 'Missing set_id parameter' }, { status: 400 });
    }

    // Validate set_id format (basic UUID validation)
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(set_id)) {
      return NextResponse.json({ error: 'Invalid set_id format' }, { status: 400 });
    }

    // First check if the set exists
    const setExists = await prisma.set.findUnique({
      where: { set_id: set_id },
      select: { set_id: true }
    });

    if (!setExists) {
      console.error(`[set/save] Set not found: ${set_id}`);
      return NextResponse.json({ 
        learnerCount: 0,
        isSaved: false,
        error: 'Set not found'
      }, { status: 404 });
    }

    // Get learner count for the set
    const learnerCount = await prisma.setSave.count({
      where: { set_id: set_id }
    });

    // Check if current user has saved this set
    const userSaved = await prisma.setSave.findFirst({
      where: {
        user_id: decoded.user_id,
        set_id: set_id
      }
    });

    return NextResponse.json({ 
      learnerCount: learnerCount || 0,
      isSaved: !!userSaved
    });

  } catch (error) {
    console.error('[set/save] Error:', error);
    console.error('[set/save] Error details:', {
      message: error.message,
      stack: error.stack,
      set_id: set_id,
      user_id: decoded?.user_id
    });
    
    // Return a more graceful error response instead of 500
    return NextResponse.json({ 
      learnerCount: 0,
      isSaved: false,
      error: 'Database error'
    }, { status: 200 }); // Return 200 instead of 500 to prevent frontend errors
  }
}
